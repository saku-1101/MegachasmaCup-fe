/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation CreateUser($input: NewUser!) {\n  createUser(input: $input) {\n    id\n  }\n}\n\nmutation UpdateUser($input: NewUser) {\n  updateUser(input: $input) {\n    id\n  }\n}\n\nmutation CreateNote($input: NewNote!) {\n  createNote(input: $input) {\n    id\n  }\n}\n\nmutation UpdateNote($input: NewNote) {\n  updateNote(input: $input) {\n    id\n  }\n}\n\nmutation CreateClass($input: NewClass!) {\n  createClass(input: $input) {\n    id\n  }\n}\n\nmutation UpdateClass($input: NewClass) {\n  updateClass(input: $input) {\n    id\n  }\n}\n\nmutation CreateSchool($input: NewSchool!) {\n  createSchool(input: $input) {\n    id\n  }\n}\n\nmutation UpdateSchool($input: NewSchool) {\n  updateSchool(input: $input) {\n    id\n  }\n}\n\nmutation CreateComment($input: NewComment!) {\n  createComment(input: $input) {\n    id\n  }\n}\n\nmutation UpdateComment($input: NewComment) {\n  updateComment(input: $input) {\n    id\n  }\n}\n\nmutation CreateTag($input: NewTag!) {\n  createTag(input: $input) {\n    id\n  }\n}\n\nmutation JoinClass($input: NewJoinClass!) {\n  joinClass(input: $input) {\n    id\n  }\n}\n\nmutation JoinSchool($input: NewJoinSchool!) {\n  joinSchool(input: $input) {\n    id\n  }\n}": types.CreateUserDocument,
    "query GetMyNotes($user_id: String!) {\n  getNotes(user_id: $user_id) {\n    id\n    class_id\n    title\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n  }\n}\n\nquery getLikedNotesOfUser($user_id: String!) {\n  getUser(user_id: $user_id) {\n    likes {\n      id\n      class_id\n      title\n      description\n      like_user {\n        id\n      }\n    }\n  }\n}\n\nquery getPrivateNotesOfUser($user_id: String!) {\n  getMyNotes(user_id: $user_id) {\n    id\n    class_id\n    title\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n  }\n}\n\nquery getAccountSettings($user_id: String!) {\n  getUser(user_id: $user_id) {\n    id\n    image_url\n    name\n    email\n    school {\n      id\n      name\n    }\n  }\n}\n\nquery getClassesOfUser($user_id: String!) {\n  getClasses(user_id: $user_id) {\n    id\n    name\n    school {\n      id\n      name\n    }\n    students {\n      id\n    }\n  }\n}\n\nquery getClasses($user_id: String!) {\n  getClasses(user_id: $user_id) {\n    id\n    name\n  }\n}\n\nquery getNotes($user_id: String!, $class_id: String) {\n  getNotes(user_id: $user_id, class_id: $class_id) {\n    id\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n  }\n}\n\nquery getNote($user_id: String!, $class_id: String, $note_id: String) {\n  getNotes(user_id: $user_id, class_id: $class_id, note_id: $note_id) {\n    id\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n    comment {\n      id\n      comment\n    }\n  }\n}\n\nquery getTags($searchWord: String!) {\n  getTags(searchWord: $searchWord) {\n    id\n    name\n  }\n}\n\nquery getSchools($searchWord: String!) {\n  getSchools(searchWord: $searchWord) {\n    id\n    name\n  }\n}": types.GetMyNotesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateUser($input: NewUser!) {\n  createUser(input: $input) {\n    id\n  }\n}\n\nmutation UpdateUser($input: NewUser) {\n  updateUser(input: $input) {\n    id\n  }\n}\n\nmutation CreateNote($input: NewNote!) {\n  createNote(input: $input) {\n    id\n  }\n}\n\nmutation UpdateNote($input: NewNote) {\n  updateNote(input: $input) {\n    id\n  }\n}\n\nmutation CreateClass($input: NewClass!) {\n  createClass(input: $input) {\n    id\n  }\n}\n\nmutation UpdateClass($input: NewClass) {\n  updateClass(input: $input) {\n    id\n  }\n}\n\nmutation CreateSchool($input: NewSchool!) {\n  createSchool(input: $input) {\n    id\n  }\n}\n\nmutation UpdateSchool($input: NewSchool) {\n  updateSchool(input: $input) {\n    id\n  }\n}\n\nmutation CreateComment($input: NewComment!) {\n  createComment(input: $input) {\n    id\n  }\n}\n\nmutation UpdateComment($input: NewComment) {\n  updateComment(input: $input) {\n    id\n  }\n}\n\nmutation CreateTag($input: NewTag!) {\n  createTag(input: $input) {\n    id\n  }\n}\n\nmutation JoinClass($input: NewJoinClass!) {\n  joinClass(input: $input) {\n    id\n  }\n}\n\nmutation JoinSchool($input: NewJoinSchool!) {\n  joinSchool(input: $input) {\n    id\n  }\n}"): (typeof documents)["mutation CreateUser($input: NewUser!) {\n  createUser(input: $input) {\n    id\n  }\n}\n\nmutation UpdateUser($input: NewUser) {\n  updateUser(input: $input) {\n    id\n  }\n}\n\nmutation CreateNote($input: NewNote!) {\n  createNote(input: $input) {\n    id\n  }\n}\n\nmutation UpdateNote($input: NewNote) {\n  updateNote(input: $input) {\n    id\n  }\n}\n\nmutation CreateClass($input: NewClass!) {\n  createClass(input: $input) {\n    id\n  }\n}\n\nmutation UpdateClass($input: NewClass) {\n  updateClass(input: $input) {\n    id\n  }\n}\n\nmutation CreateSchool($input: NewSchool!) {\n  createSchool(input: $input) {\n    id\n  }\n}\n\nmutation UpdateSchool($input: NewSchool) {\n  updateSchool(input: $input) {\n    id\n  }\n}\n\nmutation CreateComment($input: NewComment!) {\n  createComment(input: $input) {\n    id\n  }\n}\n\nmutation UpdateComment($input: NewComment) {\n  updateComment(input: $input) {\n    id\n  }\n}\n\nmutation CreateTag($input: NewTag!) {\n  createTag(input: $input) {\n    id\n  }\n}\n\nmutation JoinClass($input: NewJoinClass!) {\n  joinClass(input: $input) {\n    id\n  }\n}\n\nmutation JoinSchool($input: NewJoinSchool!) {\n  joinSchool(input: $input) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetMyNotes($user_id: String!) {\n  getNotes(user_id: $user_id) {\n    id\n    class_id\n    title\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n  }\n}\n\nquery getLikedNotesOfUser($user_id: String!) {\n  getUser(user_id: $user_id) {\n    likes {\n      id\n      class_id\n      title\n      description\n      like_user {\n        id\n      }\n    }\n  }\n}\n\nquery getPrivateNotesOfUser($user_id: String!) {\n  getMyNotes(user_id: $user_id) {\n    id\n    class_id\n    title\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n  }\n}\n\nquery getAccountSettings($user_id: String!) {\n  getUser(user_id: $user_id) {\n    id\n    image_url\n    name\n    email\n    school {\n      id\n      name\n    }\n  }\n}\n\nquery getClassesOfUser($user_id: String!) {\n  getClasses(user_id: $user_id) {\n    id\n    name\n    school {\n      id\n      name\n    }\n    students {\n      id\n    }\n  }\n}\n\nquery getClasses($user_id: String!) {\n  getClasses(user_id: $user_id) {\n    id\n    name\n  }\n}\n\nquery getNotes($user_id: String!, $class_id: String) {\n  getNotes(user_id: $user_id, class_id: $class_id) {\n    id\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n  }\n}\n\nquery getNote($user_id: String!, $class_id: String, $note_id: String) {\n  getNotes(user_id: $user_id, class_id: $class_id, note_id: $note_id) {\n    id\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n    comment {\n      id\n      comment\n    }\n  }\n}\n\nquery getTags($searchWord: String!) {\n  getTags(searchWord: $searchWord) {\n    id\n    name\n  }\n}\n\nquery getSchools($searchWord: String!) {\n  getSchools(searchWord: $searchWord) {\n    id\n    name\n  }\n}"): (typeof documents)["query GetMyNotes($user_id: String!) {\n  getNotes(user_id: $user_id) {\n    id\n    class_id\n    title\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n  }\n}\n\nquery getLikedNotesOfUser($user_id: String!) {\n  getUser(user_id: $user_id) {\n    likes {\n      id\n      class_id\n      title\n      description\n      like_user {\n        id\n      }\n    }\n  }\n}\n\nquery getPrivateNotesOfUser($user_id: String!) {\n  getMyNotes(user_id: $user_id) {\n    id\n    class_id\n    title\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n  }\n}\n\nquery getAccountSettings($user_id: String!) {\n  getUser(user_id: $user_id) {\n    id\n    image_url\n    name\n    email\n    school {\n      id\n      name\n    }\n  }\n}\n\nquery getClassesOfUser($user_id: String!) {\n  getClasses(user_id: $user_id) {\n    id\n    name\n    school {\n      id\n      name\n    }\n    students {\n      id\n    }\n  }\n}\n\nquery getClasses($user_id: String!) {\n  getClasses(user_id: $user_id) {\n    id\n    name\n  }\n}\n\nquery getNotes($user_id: String!, $class_id: String) {\n  getNotes(user_id: $user_id, class_id: $class_id) {\n    id\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n  }\n}\n\nquery getNote($user_id: String!, $class_id: String, $note_id: String) {\n  getNotes(user_id: $user_id, class_id: $class_id, note_id: $note_id) {\n    id\n    description\n    tags {\n      id\n      name\n    }\n    like_user {\n      id\n    }\n    comment {\n      id\n      comment\n    }\n  }\n}\n\nquery getTags($searchWord: String!) {\n  getTags(searchWord: $searchWord) {\n    id\n    name\n  }\n}\n\nquery getSchools($searchWord: String!) {\n  getSchools(searchWord: $searchWord) {\n    id\n    name\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;